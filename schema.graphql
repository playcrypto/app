# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public,operations: [read] } } # FOR TESTING ONLY!

type User
@model(mutations: null) 
@auth(
    rules: [
      { allow: private, operations: [read]},
   ])
#@key(name: "byNetworth", fields: [ "type", "networth" ], queryField: "getUsersByNetworth")
{
  id: ID!  @index(name: "byNetworth", sortKeyFields: [ "type", "networth" ] ,  queryField: "getUsersByNetworth")
  type: String!
  email: String!
  name: String
  image: String
  networth: Float!

  portfolioCoins: [PortfolioCoin] @hasMany(relationName:"byUser") #@connection(keyName: "byUser", fields: ["id"])
}

type PortfolioCoin
@model(mutations: null)
@auth(rules:[{ allow: private, operations: [read]}])
#@key(name: "byUser", fields: ["userId"])
{
  id: ID!
  amount: Float!

  userId: ID!
  user: [User] @manyToMany(relationName:"byUser")

  coinId: ID!
  coin: [Coin] @hasMany
}

type Coin @model(mutations: null)  
@auth(rules:[{ allow: private, operations: [read]}])
{
  id: ID!
  cgId: String
  name: String!
  symbol: String!
  image: String
  currentPrice: Float!
  valueChange24H: Float!
  valueChange1D: Float!
  valueChange7D: Float!
  priceHistoryString: String
}

type Mutation {
  exchangeCoins(
    coinId: ID!
    isBuy: Boolean!
    amount: Float!
    inrPortfolioCoinId: ID
    coinPortfolioCoinId: ID
  ): Boolean!  @function(name: "ExchangeCoins-${env}")
}